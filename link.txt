https://git-scm.com/book/de/v2

Begriffserklaerung:
* untracked: Datei noch nicht von Git erfasst
* unmodified: Datei ist Teil des Git repositories und nicht geaendert
* modified: Datei ist Teil des Git repositories, wurde aber geaendert
* staged: neue oder geaenderte Datei wurde vorgemerkt um committed zu werden
==> diese Status-Informationen liefert git status

Ignorieren von Dateien im Repository:
* dies wird ueber das configuration file .gitignore eingestellt. 
* Die Datei erwartet einen Liste von regulaeren Ausdruecken
* ! als Negation
* # als Kommentar

Diff
Aenderungen in der Staging Area koennen mittels git diff gereviewed werden.
* liegt eine Aenderung bereits in der Staging-Area und wurde die lokale Kopie weiter veraendert, so zeigt die Diff den Unterschied zwischen Staging <-> lokaler Arbeitskopie
* Um in diesem Fall den Unterschied zwischen Staging und Master zu sehen muss man git diff --staged oder git diff --cached aufrufen
* Allgemein
** + zeigt hinzugefuegte Zeile an
** - zeigt geloeschte Zeile an
** Aenderungen innerhalb einer Zeile werden durch [-<...>-]{+<...>+} dargestellt

Dateien entfernen
* Um Dateien aus der Versionskontroller zu entfernen rufe: git rm Dateiname
* Datei in Arbeitsverzeichnis behalten aber aus der Versionkontroller entfernen: git rm --cached Dateiname
* 

Dateien verschieben
* git mv Dateiname neuer_Dateiname
* alternativ git rm und git add

Historie
* git log zeigt Historie
** Option -p -<Nummer> zeigt die Aenderungen der letzten Nummer commits an
** Option --stat zeigt unter jedem Commit eine kurze Statistik an
** Option --pretty=[oneline|short|full|fuller] aendert das Format der Ausgabe. Hier gibt es viele weitere Moeglichkeiten
** Option --graph wird in Verbindung mit --pretty=format:"%h %s" verwendet um die Branch-Historie anzuzeigen
** Option --since / --until schraenkt die Log-Historie ein

Aenderungen Rueckgaengig machen
* letzten Commit aendern: git commit --amend
** der vorherige Commit wird korrigiert in Sinne von
*** der Commit-Text kann geaendert werden
*** etwaige vergessen Dateien koennen hinzugefuegt werden (alles was ich nach commit und vor commit --amend in die Staging-Area ueberfueht habe kommt hinzu)
* Aenderungen aus StagingArea entfernen: git reset HEAD <Datei>
* Aenderungen einer Datei rueckgaengig machen (Zustand des letzten Commits): git checkout -- <Datei>

Externe Repositories
* git remote zeigt den externen Server des aktuellen Projekts an. Hierbei wird der Kurzname dargestellt - bei default origin
** git remote -v zeigt den vollstaendigen Pfad/ Namen an
** es kann mehrere externe Server geben, die unterschiedliche Staende haben
* git remote add <Name> <URL> fuegt ein neuen externen Server hinzu
* git fetch <Name> laedt alle Aenderungen des Name Servers herunter
** git fetch origin laedt alle Aenderungen des Defaults herunter
** bei Tracking branch verwendet man git pull um herunterzuladen und zu mergen
* Aenderungen hochladen: git push [RemoteName] [BranchName]
* Repository durchstoebern: remote show [RemoteName]
* Remote repository umbenennen: git remote rename AlterExternName NeuerExternName
* Remote entfernen: git remote rm ExternName

Lokale Repositorie auf Server erstellen
* git clone --bare .git ProjektName.git exportiert das Repository als einfaches (leeres) repository. Ein ProjektName.git Ordner wird erzeugt
* scp -r ProjektName.git user@server:/path/to/repositories/ kopiert den Inhalt auf den Server
* rm -rf ProjektName.git loescht den lokalen Export
* git remote add origin path/to/server verbindet lokales und remote repository

Tags: https://git-scm.com/book/de/v1/Git-Grundlagen-Tags
* git tag listet alle Tags im Repository auf
** git tag -l 'pattern' sucht nach bestimmtem Tag
* speziellen Tag ansehen: git show vNummer.Nummer
* Tag anlegen
** kommentierte Tags: git tag -a vNummer.Nummer -m "Kommentar" legt tag Nummer.Nummer an
** signierte Tags: git tag -s vNummer.Nummer -m 'Kommentar'
** einfache Tags: git tag vNummer.Nummer
* Tags nachtraeglich setzen: git tag -a vNummer.Nummer -m 'Kommentar' ChecksumAusCommitOderTeilDavon
* Tag veroeffentlichen (muss explizit erfolgen): git push origin [tagname]
** alternativ git push origin --tags laedt alle Tags hoch
